

Strings:

- Recursive:

private static void recursivePermute(String prefix, String str, Set<String> permutations){
    int n = str.length();

    if (n == 0)
    {
        permutations.add(prefix);
    }
    else {
        for (int i = 0; i < n; i++)
        {
            permute(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1), permutations);
        }
    }
}

- Iterative

private static void iterativePermute(String str, Set<String> permutations){

    Stack<String> stack = new Stack<>();

    stack.push(str);

    while(!stack.isEmpty()) {

        str = stack.pop();

        for (int i = 0; i < str.length(); i++)
        {
            String permutation = str.charAt(i) + str.substring(0, i) + str.substring(i + 1);

            if(permutations.add(permutation)) {
                stack.push(permutation);
            }
        }
    }
}




Arrays:

- Recursive:

private static void permute(Object[] prefix, Object[] suffix, Set<String> permutations){
    int n = suffix.length;

    if (n == 0)
    {
        permutations.add(Arrays.toString(prefix));
    }
    else {
        for (int i = 0; i < n; i++)
        {
            Object[] nextPrefix = Arrays.copyOf(prefix, prefix.length + 1);
            nextPrefix[prefix.length] = suffix[i];

            Object[] nextSuffix = new Object[suffix.length - 1];
            System.arraycopy(suffix, 0, nextSuffix, 0, i);
            System.arraycopy(suffix, i + 1, nextSuffix, i, suffix.length - 1 - i);

            permute(nextPrefix, nextSuffix, permutations);
        }
    }
}

- Iterative

private static void permute(Object[] original, Set<String> permutations){

    Stack<Object[]> stack = new Stack<>();

    stack.push(original);

    while(!stack.isEmpty()) {

        original = stack.pop();

        for (int i = 0; i < original.length; i++)
        {
            Object[] permutation = new Object[original.length];
            permutation[0] = original[i];

            System.arraycopy(original, 0, permutation, 1, i);
            System.arraycopy(original, i + 1, permutation, i + 1, original.length - 1 - i);

            if(permutations.add(Arrays.toString(permutation))) {
                stack.push(permutation);
            }
        }
    }
}